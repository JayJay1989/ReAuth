buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

version = "${Major}.${Patch}"
group = "${Author}"
archivesBaseName = "${ModName}-${MCVersion}"

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

minecraft {
    mappings channel: 'snapshot', version: '20200514-1.16'

    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            mods {
                reauth {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            mods {
                reauth {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            args '--mod', 'reauth', '--all', '--output', file('src/generated/resources/')
            mods {
                reauth {
                    source sourceSets.main
                }
            }
        }
    }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.16.1-32.0.20'
}

jar {
    manifest {
        attributes([
            "Specification-Title"     : "${ModID}",
            "Specification-Vendor"    : "${Author}",
            "Specification-Version"   : "${version}",
            "Implementation-Title"    : "${ModName}",
            "Implementation-Version"  : "${version}",
            "Implementation-Vendor"   : "${Author}",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}


import groovy.swing.SwingBuilder

import java.awt.*

task signJar(type: Exec, dependsOn: assemble) {
    onlyIf {
        project.hasProperty('keyStore')
    }
    ext {
        storePass = null
        keyPass = null
    }
    executable = "jarsigner"
    args(["-signedJar", jar.archivePath, jar.archivePath, project.keyStoreAlias,
          "-tsa", project.tsa,
          "-keystore", project.keyStore])
    doFirst {
        if (storePass != null && storePass?.trim())
            args(["-storepass", storePass])
        if (keyPass != null && keyPass?.trim())
            args(["-keypass", keyPass])
    }
}
build.dependsOn signJar

gradle.taskGraph.whenReady { taskGraph ->
    if (taskGraph.hasTask(':signJar')) {
        if (System.console() == null) {
            new SwingBuilder().edt {
                dialog(modal: true, title: 'KeyStore Passwords', alwaysOnTop: true, resizable: false,
                        locationRelativeTo: null, show: true, size: [300, 150]) {
                    panel(layout: new BorderLayout(5, 5)) {
                        def store
                        def key
                        vbox(constraints: BorderLayout.CENTER) {
                            label(text: "Keystore:",)
                            store = passwordField()
                            label(text: "Key:")
                            key = passwordField()
                        }
                        button(defaultButton: true, text: 'OK', constraints: BorderLayout.SOUTH, actionPerformed: {
                            signJar.storePass = new String(store.password)
                            signJar.keyPass = new String(key.password)
                            dispose()
                        })
                    }
                }
            }
        } else {
            signJar.storePass = new String(System.console().readPassword("\nKeyStore Password: "))
            signJar.keyPass = new String(System.console().readPassword("\nKey Password: "))
        }
    }
}


